{"version":3,"sources":["components/ui/Button/Button.styles.js","components/ui/Button/Button.js","components/ui/Item/Item.js","components/StaffMenu/StaffMenu.js","components/Wrapper/Wrapper.js","App.js","reportWebVitals.js","index.js"],"names":["buttonSecondary","css","buttonDefault","CustomButton","styled","button","props","console","log","size","Button","name","buttonColor","Item","text","StaffMenu","title","content","buttonName","map","city","id","defaultProps","Wrapper","children","cities","App","disable","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAGMA,EAAkBC,YAAH,8EAKfC,EAAgBD,YAAH,8EAcNE,EAAeC,IAAOC,OAAV,oRATN,SAAAC,GAGjB,OAFAC,QAAQC,IAAR,gBAA6BF,GAEV,UAAfA,EAAMG,KACDP,EAEFF,KAWS,SAAAM,GAAK,MAAoB,UAAfA,EAAMG,KAAmB,OAAS,U,OCxBjDC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,EAASC,YAAT,OACpB,cAACT,EAAD,CAAcM,KAAK,QAAnB,SAA4BE,KCLjBE,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAClB,8BACE,4BAAIA,OCCKC,EAAY,SAAC,GAUnB,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,QACAC,EACI,EADJA,WAGA,OACE,gCACE,6BAAKF,IAGJC,EAAQE,KAAI,SAAAC,GAAI,OAGf,aAFA,CAEC,EAAD,CAAoBN,KAAMM,EAAKT,MAApBS,EAAKC,OAElB,cAAC,EAAD,CAAQV,KAAMO,EAAYN,YAAY,kBAQ5CG,EAAUO,aAAe,CACvBN,MAAO,YACPC,QAAS,GACTC,WAAY,eCnCP,IAAMK,EAAU,SAAAjB,GAErB,OADAC,QAAQC,IAAI,SAAUF,GAEpB,gCACE,qDACCA,EAAMkB,aCJPC,EAAS,CACb,CAAEd,KAAM,OAAQU,GAAI,YACpB,CAAEV,KAAM,SAAUU,GAAI,cAiBTK,EAdH,WACV,OACE,cAAC,EAAD,CAASC,SAAS,EAAlB,SACE,cAAC,EAAD,CAAWX,MAAM,uCAASE,WAAW,kFAAiBD,QAASQ,OCAtDG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OAIP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c3e42bdd.chunk.js","sourcesContent":["import { css } from '@emotion/react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst buttonSecondary = css`\r\n  background-color: #21f360;\r\n  font-size: 24px;\r\n`\r\n\r\nconst buttonDefault = css`\r\n  background-color: #e078e4;\r\n  font-size: 14px;\r\n`\r\n\r\nconst CustomSize = props => {\r\n  console.log(`props styled:`, props)\r\n  // в Button.js ставим CustomButton size=\"medium\" или \"small\"\r\n  if (props.size === 'small') {\r\n    return buttonDefault\r\n  }\r\n  return buttonSecondary\r\n}\r\n\r\nexport const CustomButton = styled.button`\r\n${CustomSize}\r\n  display: inline-flex;\r\n  margin: 0 4px;\r\n  padding: 8px 24px;\r\n  border: 0;\r\n  border-radius: 2px;\r\n  color: #ffffff;\r\n  /* font-size: ${props => (props.size === 'small' ? '14px' : '25px')}; */\r\n  font-family: inherit;\r\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n`\r\n","import React from 'react'\r\n// import './ButtonStyle.css'\r\n// import styles from './Button.module.css'\r\nimport { CustomButton } from './Button.styles'\r\n// yстанавливаем Emotion (npm install --save @emotion/react u npm install --save @emotion/styled)\r\n\r\nexport const Button = ({ name, buttonColor }) => (\r\n  <CustomButton size=\"small\">{name}</CustomButton>\r\n)\r\n\r\n// в StaffMenu можем передать buttonColor='Secondary' или buttonColor='Default'\r\n// const currentColor = {\r\n//   Secondary: styles.ButtonSecondary,\r\n//   Default: styles.ButtonDefault\r\n// }\r\n\r\n// export const Button = ({ name, buttonColor }) => (\r\n//   <button className={[styles.CustomButton, currentColor[buttonColor]].join(' ')}>\r\n//     {name}\r\n//   </button>\r\n// )\r\n// console.log(`styles`, styles)\r\n\r\n// export const Button = props => {\r\n//   console.log(`props`, props)\r\n//   return <button className=\"button\">{props.name}</button>\r\n// }\r\n","import React from 'react'\r\n\r\nexport const Item = ({ text }) => (\r\n  <div>\r\n    <p>{text}</p>\r\n  </div>\r\n)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Button } from '../ui/Button/Button'\r\nimport { Item } from '../ui/Item/Item'\r\n\r\nexport const StaffMenu = ({\r\n  // можно указать параметры по дефолту:\r\n  // title = 'not found',\r\n  // content = [],\r\n  // buttonName = 'click me :)'\r\n\r\n  // или установить PropTypes и:\r\n  title,\r\n  content,\r\n  buttonName\r\n}) => {\r\n  // console.log(`props`, props)\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      {/* content? - новый синтаксис, проверка на наличие свойства. \r\n      Если там ничего нет, просто не запускай правую сторону */}\r\n      {content.map(city => (\r\n        // text - это пропс\r\n        // key - это не пропс, поэтому он не попадает в объект с пропсами, не передаётся по наследству\r\n        <Item key={city.id} text={city.name} />\r\n      ))}\r\n      <Button name={buttonName} buttonColor='Secondary'/>\r\n      {/* внутри интерполяции выполняются логические действия: */}\r\n      {/* <h2>{4+4}</h2> */}\r\n    </div>\r\n  )\r\n}\r\n\r\n// PropTypes на случай, если никакие данные не пришли из вне\r\nStaffMenu.defaultProps = {\r\n  title: 'not found',\r\n  content: [],\r\n  buttonName: 'click me :)'\r\n}\r\n\r\nStaffMenu.propTypes = {\r\n  title: PropTypes.string,\r\n  content: PropTypes.array,\r\n  buttonName: PropTypes.string\r\n}\r\n","// imr + Tab:\r\nimport React, { cloneElement } from 'react'\r\n\r\nexport const Wrapper = props => {\r\n  console.log('props:', props)\r\n  return (\r\n    <div>\r\n      <h2>it is a big problem</h2>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport { StaffMenu } from './components/StaffMenu/StaffMenu'\nimport { Wrapper } from './components/Wrapper/Wrapper'\n\nconst cities = [\n  { name: 'Kyiv', id: '0s9difve' },\n  { name: 'London', id: 'bi43y8fgv' }\n]\n\nconst App = () => {\n  return (\n    <Wrapper disable={false}>\n      <StaffMenu title='Города' buttonName='Добавить город' content={cities} />\n    </Wrapper>\n  )\n}\n\n{\n  /* <StaffMenu title='Преподаватели' buttonName='Добавить преподавателя' />\n      <StaffMenu title='Города' buttonName='Добавить город' content={cities} />\n      <StaffMenu title='Факультеты' buttonName='Добавить факультет' /> */\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\n\nReactDOM.render(\n  // StrictMode - обёртка, которая позволяет отлавливать действия, \n  // которые уже являются неактуальными (неподдерживаемые методы, практики).\n  // его можно отключить, избавив себя от части полезной информации о том, что ты делаешь не так.\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}